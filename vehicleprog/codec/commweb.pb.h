// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commweb.proto

#ifndef PROTOBUF_commweb_2eproto__INCLUDED
#define PROTOBUF_commweb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace commweb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_commweb_2eproto();
void protobuf_AssignDesc_commweb_2eproto();
void protobuf_ShutdownFile_commweb_2eproto();

class AxleInfo;
class VehicleInfo;
class CmdInfo;

// ===================================================================

class AxleInfo : public ::google::protobuf::Message {
 public:
  AxleInfo();
  virtual ~AxleInfo();
  
  AxleInfo(const AxleInfo& from);
  
  inline AxleInfo& operator=(const AxleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AxleInfo& default_instance();
  
  void Swap(AxleInfo* other);
  
  // implements Message ----------------------------------------------
  
  AxleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AxleInfo& from);
  void MergeFrom(const AxleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float fW = 1;
  inline bool has_fw() const;
  inline void clear_fw();
  static const int kFWFieldNumber = 1;
  inline float fw() const;
  inline void set_fw(float value);
  
  // required float fV = 2;
  inline bool has_fv() const;
  inline void clear_fv();
  static const int kFVFieldNumber = 2;
  inline float fv() const;
  inline void set_fv(float value);
  
  // @@protoc_insertion_point(class_scope:commweb.AxleInfo)
 private:
  inline void set_has_fw();
  inline void clear_has_fw();
  inline void set_has_fv();
  inline void clear_has_fv();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float fw_;
  float fv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_commweb_2eproto();
  friend void protobuf_AssignDesc_commweb_2eproto();
  friend void protobuf_ShutdownFile_commweb_2eproto();
  
  void InitAsDefaultInstance();
  static AxleInfo* default_instance_;
};
// -------------------------------------------------------------------

class VehicleInfo : public ::google::protobuf::Message {
 public:
  VehicleInfo();
  virtual ~VehicleInfo();
  
  VehicleInfo(const VehicleInfo& from);
  
  inline VehicleInfo& operator=(const VehicleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleInfo& default_instance();
  
  void Swap(VehicleInfo* other);
  
  // implements Message ----------------------------------------------
  
  VehicleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleInfo& from);
  void MergeFrom(const VehicleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cDir = 1;
  inline bool has_cdir() const;
  inline void clear_cdir();
  static const int kCDirFieldNumber = 1;
  inline ::google::protobuf::int32 cdir() const;
  inline void set_cdir(::google::protobuf::int32 value);
  
  // required int32 cAxleCount = 2;
  inline bool has_caxlecount() const;
  inline void clear_caxlecount();
  static const int kCAxleCountFieldNumber = 2;
  inline ::google::protobuf::int32 caxlecount() const;
  inline void set_caxlecount(::google::protobuf::int32 value);
  
  // optional int32 cLevel = 3;
  inline bool has_clevel() const;
  inline void clear_clevel();
  static const int kCLevelFieldNumber = 3;
  inline ::google::protobuf::int32 clevel() const;
  inline void set_clevel(::google::protobuf::int32 value);
  
  // required int32 nType = 4;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 4;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);
  
  // required float fW = 5;
  inline bool has_fw() const;
  inline void clear_fw();
  static const int kFWFieldNumber = 5;
  inline float fw() const;
  inline void set_fw(float value);
  
  // required float fV = 6;
  inline bool has_fv() const;
  inline void clear_fv();
  static const int kFVFieldNumber = 6;
  inline float fv() const;
  inline void set_fv(float value);
  
  // repeated .commweb.AxleInfo aInfo = 7;
  inline int ainfo_size() const;
  inline void clear_ainfo();
  static const int kAInfoFieldNumber = 7;
  inline const ::commweb::AxleInfo& ainfo(int index) const;
  inline ::commweb::AxleInfo* mutable_ainfo(int index);
  inline ::commweb::AxleInfo* add_ainfo();
  inline const ::google::protobuf::RepeatedPtrField< ::commweb::AxleInfo >&
      ainfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::commweb::AxleInfo >*
      mutable_ainfo();
  
  // optional string cColumn = 8;
  inline bool has_ccolumn() const;
  inline void clear_ccolumn();
  static const int kCColumnFieldNumber = 8;
  inline const ::std::string& ccolumn() const;
  inline void set_ccolumn(const ::std::string& value);
  inline void set_ccolumn(const char* value);
  inline void set_ccolumn(const char* value, size_t size);
  inline ::std::string* mutable_ccolumn();
  inline ::std::string* release_ccolumn();
  
  // @@protoc_insertion_point(class_scope:commweb.VehicleInfo)
 private:
  inline void set_has_cdir();
  inline void clear_has_cdir();
  inline void set_has_caxlecount();
  inline void clear_has_caxlecount();
  inline void set_has_clevel();
  inline void clear_has_clevel();
  inline void set_has_ntype();
  inline void clear_has_ntype();
  inline void set_has_fw();
  inline void clear_has_fw();
  inline void set_has_fv();
  inline void clear_has_fv();
  inline void set_has_ccolumn();
  inline void clear_has_ccolumn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cdir_;
  ::google::protobuf::int32 caxlecount_;
  ::google::protobuf::int32 clevel_;
  ::google::protobuf::int32 ntype_;
  float fw_;
  float fv_;
  ::google::protobuf::RepeatedPtrField< ::commweb::AxleInfo > ainfo_;
  ::std::string* ccolumn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_commweb_2eproto();
  friend void protobuf_AssignDesc_commweb_2eproto();
  friend void protobuf_ShutdownFile_commweb_2eproto();
  
  void InitAsDefaultInstance();
  static VehicleInfo* default_instance_;
};
// -------------------------------------------------------------------

class CmdInfo : public ::google::protobuf::Message {
 public:
  CmdInfo();
  virtual ~CmdInfo();
  
  CmdInfo(const CmdInfo& from);
  
  inline CmdInfo& operator=(const CmdInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdInfo& default_instance();
  
  void Swap(CmdInfo* other);
  
  // implements Message ----------------------------------------------
  
  CmdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdInfo& from);
  void MergeFrom(const CmdInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:commweb.CmdInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_commweb_2eproto();
  friend void protobuf_AssignDesc_commweb_2eproto();
  friend void protobuf_ShutdownFile_commweb_2eproto();
  
  void InitAsDefaultInstance();
  static CmdInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// AxleInfo

// required float fW = 1;
inline bool AxleInfo::has_fw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AxleInfo::set_has_fw() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AxleInfo::clear_has_fw() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AxleInfo::clear_fw() {
  fw_ = 0;
  clear_has_fw();
}
inline float AxleInfo::fw() const {
  return fw_;
}
inline void AxleInfo::set_fw(float value) {
  set_has_fw();
  fw_ = value;
}

// required float fV = 2;
inline bool AxleInfo::has_fv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AxleInfo::set_has_fv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AxleInfo::clear_has_fv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AxleInfo::clear_fv() {
  fv_ = 0;
  clear_has_fv();
}
inline float AxleInfo::fv() const {
  return fv_;
}
inline void AxleInfo::set_fv(float value) {
  set_has_fv();
  fv_ = value;
}

// -------------------------------------------------------------------

// VehicleInfo

// optional int32 cDir = 1;
inline bool VehicleInfo::has_cdir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleInfo::set_has_cdir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleInfo::clear_has_cdir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleInfo::clear_cdir() {
  cdir_ = 0;
  clear_has_cdir();
}
inline ::google::protobuf::int32 VehicleInfo::cdir() const {
  return cdir_;
}
inline void VehicleInfo::set_cdir(::google::protobuf::int32 value) {
  set_has_cdir();
  cdir_ = value;
}

// required int32 cAxleCount = 2;
inline bool VehicleInfo::has_caxlecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleInfo::set_has_caxlecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleInfo::clear_has_caxlecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleInfo::clear_caxlecount() {
  caxlecount_ = 0;
  clear_has_caxlecount();
}
inline ::google::protobuf::int32 VehicleInfo::caxlecount() const {
  return caxlecount_;
}
inline void VehicleInfo::set_caxlecount(::google::protobuf::int32 value) {
  set_has_caxlecount();
  caxlecount_ = value;
}

// optional int32 cLevel = 3;
inline bool VehicleInfo::has_clevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleInfo::set_has_clevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleInfo::clear_has_clevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleInfo::clear_clevel() {
  clevel_ = 0;
  clear_has_clevel();
}
inline ::google::protobuf::int32 VehicleInfo::clevel() const {
  return clevel_;
}
inline void VehicleInfo::set_clevel(::google::protobuf::int32 value) {
  set_has_clevel();
  clevel_ = value;
}

// required int32 nType = 4;
inline bool VehicleInfo::has_ntype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleInfo::set_has_ntype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleInfo::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleInfo::clear_ntype() {
  ntype_ = 0;
  clear_has_ntype();
}
inline ::google::protobuf::int32 VehicleInfo::ntype() const {
  return ntype_;
}
inline void VehicleInfo::set_ntype(::google::protobuf::int32 value) {
  set_has_ntype();
  ntype_ = value;
}

// required float fW = 5;
inline bool VehicleInfo::has_fw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleInfo::set_has_fw() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VehicleInfo::clear_has_fw() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VehicleInfo::clear_fw() {
  fw_ = 0;
  clear_has_fw();
}
inline float VehicleInfo::fw() const {
  return fw_;
}
inline void VehicleInfo::set_fw(float value) {
  set_has_fw();
  fw_ = value;
}

// required float fV = 6;
inline bool VehicleInfo::has_fv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleInfo::set_has_fv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VehicleInfo::clear_has_fv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VehicleInfo::clear_fv() {
  fv_ = 0;
  clear_has_fv();
}
inline float VehicleInfo::fv() const {
  return fv_;
}
inline void VehicleInfo::set_fv(float value) {
  set_has_fv();
  fv_ = value;
}

// repeated .commweb.AxleInfo aInfo = 7;
inline int VehicleInfo::ainfo_size() const {
  return ainfo_.size();
}
inline void VehicleInfo::clear_ainfo() {
  ainfo_.Clear();
}
inline const ::commweb::AxleInfo& VehicleInfo::ainfo(int index) const {
  return ainfo_.Get(index);
}
inline ::commweb::AxleInfo* VehicleInfo::mutable_ainfo(int index) {
  return ainfo_.Mutable(index);
}
inline ::commweb::AxleInfo* VehicleInfo::add_ainfo() {
  return ainfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commweb::AxleInfo >&
VehicleInfo::ainfo() const {
  return ainfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::commweb::AxleInfo >*
VehicleInfo::mutable_ainfo() {
  return &ainfo_;
}

// optional string cColumn = 8;
inline bool VehicleInfo::has_ccolumn() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VehicleInfo::set_has_ccolumn() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VehicleInfo::clear_has_ccolumn() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VehicleInfo::clear_ccolumn() {
  if (ccolumn_ != &::google::protobuf::internal::kEmptyString) {
    ccolumn_->clear();
  }
  clear_has_ccolumn();
}
inline const ::std::string& VehicleInfo::ccolumn() const {
  return *ccolumn_;
}
inline void VehicleInfo::set_ccolumn(const ::std::string& value) {
  set_has_ccolumn();
  if (ccolumn_ == &::google::protobuf::internal::kEmptyString) {
    ccolumn_ = new ::std::string;
  }
  ccolumn_->assign(value);
}
inline void VehicleInfo::set_ccolumn(const char* value) {
  set_has_ccolumn();
  if (ccolumn_ == &::google::protobuf::internal::kEmptyString) {
    ccolumn_ = new ::std::string;
  }
  ccolumn_->assign(value);
}
inline void VehicleInfo::set_ccolumn(const char* value, size_t size) {
  set_has_ccolumn();
  if (ccolumn_ == &::google::protobuf::internal::kEmptyString) {
    ccolumn_ = new ::std::string;
  }
  ccolumn_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VehicleInfo::mutable_ccolumn() {
  set_has_ccolumn();
  if (ccolumn_ == &::google::protobuf::internal::kEmptyString) {
    ccolumn_ = new ::std::string;
  }
  return ccolumn_;
}
inline ::std::string* VehicleInfo::release_ccolumn() {
  clear_has_ccolumn();
  if (ccolumn_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ccolumn_;
    ccolumn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CmdInfo

// required int32 type = 1;
inline bool CmdInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CmdInfo::type() const {
  return type_;
}
inline void CmdInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commweb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_commweb_2eproto__INCLUDED
